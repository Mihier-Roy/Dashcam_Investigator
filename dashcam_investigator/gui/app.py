import logging
import pathlib
import sys
from PySide2 import QtWidgets, QtGui, QtCore
import pandas as pd
from gui.table_models import PandasTableModel
from gui.QtMainWindow import Ui_MainWindow
from PySide2.QtMultimedia import QMediaPlayer, QMediaPlaylist, QMediaContent
from PySide2.QtCore import QUrl
from utils.convert_milli import convert_to_seconds

logger = logging.getLogger(__name__)


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, dir_path, video_path, metadata_df, gps_df):
        super(MainWindow, self).__init__()
        self.setupUi(self)

        # Move the application window to the center of the screen
        logger.debug("Moving window to the center of the screen")
        # Get current screen size
        screen_size = QtGui.QScreen.availableGeometry(
            QtWidgets.QApplication.primaryScreen()
        )
        # Compute the  coordinates for the center of the screen
        x_coordinates = (screen_size.width() - self.width()) / 2
        y_coordinates = (screen_size.height() - self.height()) / 2 - 20
        self.move(x_coordinates, y_coordinates)

        # Load current directory into tree view
        logger.debug(f"Loading selected input directory to the TreeView -> {dir_path} ")
        model = QtWidgets.QFileSystemModel()
        model.setRootPath(str(dir_path.resolve()))
        self.dir_tree_view.setModel(model)
        self.dir_tree_view.setRootIndex(model.index(str(dir_path.resolve())))
        self.dir_tree_view.hideColumn(1)
        self.dir_tree_view.hideColumn(2)
        self.dir_tree_view.hideColumn(3)
        self.dir_tree_view.show()
        # Collect the currently selected item
        self.dir_tree_view.clicked.connect(self.on_selected)

        # Define media player
        logger.debug("Loading media player")
        self.mediaPlayer = QMediaPlayer()
        self.mediaPlaylist = QMediaPlaylist()

        # Add the video file path
        logger.debug(f"Adding to playlist -> {video_path}")
        self.mediaPlaylist.addMedia(QUrl.fromLocalFile(str(video_path.resolve())))
        # Set the QMediaPlaylist for the QMediaPlayer.
        self.mediaPlayer.setPlaylist(self.mediaPlaylist)
        # Set the video output from the QMediaPlayer to the QVideoWidget.
        self.mediaPlayer.setVideoOutput(self.video_player)

        # Set the QPushButtons to play, pause and stop the video in the QVideoWidget.
        self.play_button.clicked.connect(self.play_video)
        self.pause_button.clicked.connect(self.pause_video)
        self.stop_button.clicked.connect(self.stop_video)
        # Set the total range for the QSlider.
        self.mediaPlayer.durationChanged.connect(self.change_duration)
        # Set the current value for the QSlider.
        self.mediaPlayer.positionChanged.connect(self.change_position)
        # Set the video position in QMediaPlayer based on the QSlider position.
        self.horizontal_slider.sliderMoved.connect(self.video_position)

        ######################################
        # Metadata tab view
        ######################################
        self.metadata_model = PandasTableModel(metadata_df)
        self.metadata_table.setModel(self.metadata_model)
        self.gps_model = PandasTableModel(gps_df)
        self.gps_table.setModel(self.gps_model)

    def play_video(self):
        """
        Handles the clicked signal generated by playButton and plays the video in the mediaPlayer.
        """
        self.mediaPlayer.play()
        duration = self.mediaPlayer.duration()
        sec, min = convert_to_seconds(int(duration))
        self.total_duration.setText(f"{min}:{sec}")

    def pause_video(self):
        """
        Handles the clicked signal generated by playButton and pauses video in the mediaPlayer.
        """
        self.mediaPlayer.pause()

    def stop_video(self):
        """
        Handles the clicked signal generated by playButton and stops the video in the mediaPlayer.
        """
        self.mediaPlayer.stop()

    def change_position(self, position):
        """
        Handles the positionChanged signal generated by the mediaPlayer.
        Sets the current value of the QSlider to the current position of the video in the QMediaPlayer.
        :param position: current position of the video in the QMediaPlayer.
        """
        self.horizontal_slider.setValue(position)
        sec, min = convert_to_seconds(int(position))
        self.current_duration.setText(f"{min}:{sec}")

    def change_duration(self, duration):
        """
        Handles the durationChanged signal generated by the mediaPlayer.
        Sets the range of the QSlider.
        :param duration: Total duration of the video in the QMediaPlayer.
        """
        self.horizontal_slider.setRange(0, duration)

    def video_position(self, position):
        """
        Handles the sliderMoved signal generated by the horizontalSlider.
        Changes the position of the video in the QMediaPlayer on changing the value of the QSlider.
        :param position: Current position value of the QSlider.
        :return:
        """
        self.mediaPlayer.setPosition(position)

    def on_selected(self, selected_index):
        # Get the path of the selected file
        fs = QtWidgets.QFileSystemModel()
        file_path = pathlib.Path(fs.filePath(selected_index))

        # Stop current video and clear playlist
        self.mediaPlayer.stop()
        self.mediaPlaylist.clear()
        # Add selected video to playlist and initalise the media player
        logger.debug(
            f"New item selected. Adding to playlist -> {str(file_path.resolve())}"
        )
        self.mediaPlaylist.addMedia(QUrl.fromLocalFile(str(file_path.resolve())))
        self.mediaPlayer.setPlaylist(self.mediaPlaylist)


def run():
    logger.info("---Running Dashcam Investigator---")
    dir_path = pathlib.Path("H:/DissertationDataset", "Trancend")
    video_path = pathlib.Path(
        "H:/DissertationDataset",
        "Trancend",
        "DP220",
        "N_VIDEO",
        "2019_1118_085235_008.MOV",
    )
    metadata_df = pd.read_csv(
        "C:/Users/mihie/AppData/Local/Temp/2019_1120_052408_001_fileinfo.csv"
    )
    metadata_df = metadata_df.T
    metadata_df.rename(columns={0: "Value"}, inplace=True)
    gps_df = pd.read_csv(
        "C:/Users/mihie/AppData/Local/Temp/2019_1119_165917_001_gpsdata_converted.csv",
        names=["GPS Speed", "GPS Latitude", "GPS Logitude"],
    )
    app = QtWidgets.QApplication([])
    logger.debug("Initialising and displaying main window")
    window = MainWindow(dir_path, video_path, metadata_df, gps_df)
    window.show()
    sys.exit(app.exec_())
