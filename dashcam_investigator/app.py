from PySide2 import QtWidgets, QtGui
from QtMainWindow import Ui_DashcamInvestigator
from PySide2.QtMultimedia import QMediaPlayer, QMediaPlaylist
from PySide2.QtCore import QUrl
import pathlib


class MainWindow(QtWidgets.QMainWindow, Ui_DashcamInvestigator):
    def __init__(self):
        video_path = pathlib.Path(
            "H:/DissertationDataset",
            "Trancend/DP220",
            "N_VIDEO/2019_1118_085235_008.MOV",
        )
        super(MainWindow, self).__init__()
        self.setupUi(self)

        # Move the application window to the center of the screen
        # Get current screen size
        screen_size = QtGui.QScreen.availableGeometry(
            QtWidgets.QApplication.primaryScreen()
        )
        # Compute the  coordinates for the center of the screen
        x_coordinates = (screen_size.width() - self.width()) / 2
        y_coordinates = (screen_size.height() - self.height()) / 2 - 20
        self.move(x_coordinates, y_coordinates)
        # Define media player
        self.mediaPlayer = QMediaPlayer()
        self.mediaPlaylist = QMediaPlaylist()

        # Add the video file path
        self.mediaPlaylist.addMedia(QUrl.fromLocalFile(str(video_path.resolve())))
        # Set the video to played in a loop once it ends.
        self.mediaPlaylist.setPlaybackMode(QMediaPlaylist.CurrentItemInLoop)
        # Set the QMediaPlaylist for the QMediaPlayer.
        self.mediaPlayer.setPlaylist(self.mediaPlaylist)
        # Set the video output from the QMediaPlayer to the QVideoWidget.
        self.mediaPlayer.setVideoOutput(self.QVideoWidget)

        # Set the QPushButtons to play, pause and stop the video in the QVideoWidget.
        self.playButton.clicked.connect(self.play_video)
        self.pauseButton.clicked.connect(self.pause_video)
        self.stopButton.clicked.connect(self.stop_video)
        # Set the total range for the QSlider.
        self.mediaPlayer.durationChanged.connect(self.change_duration)
        # Set the current value for the QSlider.
        self.mediaPlayer.positionChanged.connect(self.change_position)
        # Set the video position in QMediaPlayer based on the QSlider position.
        self.horizontalSlider.sliderMoved.connect(self.video_position)

    def play_video(self):
        """
        Handles the clicked signal generated by playButton and plays the video in the mediaPlayer.
        """
        self.mediaPlayer.play()
        duration = self.mediaPlayer.duration()
        sec, min = self.convert_to_seconds(int(duration))
        self.totalDuration.setText(f"{min}:{sec}")

    def pause_video(self):
        """
        Handles the clicked signal generated by playButton and pauses video in the mediaPlayer.
        """
        self.mediaPlayer.pause()

    def stop_video(self):
        """
        Handles the clicked signal generated by playButton and stops the video in the mediaPlayer.
        """
        self.mediaPlayer.stop()

    def change_position(self, position):
        """
        Handles the positionChanged signal generated by the mediaPlayer.
        Sets the current value of the QSlider to the current position of the video in the QMediaPlayer.
        :param position: current position of the video in the QMediaPlayer.
        """
        self.horizontalSlider.setValue(position)
        sec, min = self.convert_to_seconds(int(position))
        self.currentDuration.setText(f"{min}:{sec}")

    def change_duration(self, duration):
        """
        Handles the durationChanged signal generated by the mediaPlayer.
        Sets the range of the QSlider.
        :param duration: Total duration of the video in the QMediaPlayer.
        """
        self.horizontalSlider.setRange(0, duration)

    def video_position(self, position):
        """
        Handles the sliderMoved signal generated by the horizontalSlider.
        Changes the position of the video in the QMediaPlayer on changing the value of the QSlider.
        :param position: Current position value of the QSlider.
        :return:
        """
        self.mediaPlayer.setPosition(position)

    def convert_to_seconds(self, milliseconds):
        seconds = int((milliseconds / 1000) % 60)
        minutes = int((milliseconds / (1000 * 60)) % 60)
        if seconds < 10:
            seconds = "0" + str(seconds)
        if minutes < 10:
            minutes = "0" + str(minutes)
        return seconds, minutes


app = QtWidgets.QApplication([])

window = MainWindow()
window.show()
app.exec_()
