import logging
import pandas as pd
import sys
from pathlib import Path
from PySide2 import QtWidgets, QtGui
from project_manager.create_new_project import create_new_project
from project_manager.project_datatypes import FileAttributes
from project_manager.project_manager import ProjectManager
from gui.qt_models import PandasTableModel, VideoListModel, NavigationListModel
from gui.QtMainWindow import Ui_MainWindow
from gui.NewProjectDialog import Ui_Dialog
from PySide2.QtMultimedia import QMediaPlayer, QMediaPlaylist
from PySide2.QtCore import QUrl
from utils.convert_milli import convert_to_seconds

logger = logging.getLogger(__name__)
NAVIGATION_PAGES = ["Welcome", "Project"]


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self) -> None:
        super(MainWindow, self).__init__()
        self.setupUi(self)
        self.project_manager = ProjectManager()
        self.project_object = None
        self.current_video = None

        # Move the application window to the center of the screen
        logger.debug("Moving window to the center of the screen")
        # Get current screen size
        screen_size = QtGui.QScreen.availableGeometry(
            QtWidgets.QApplication.primaryScreen()
        )
        # Compute the  coordinates for the center of the screen
        x_coordinates = (screen_size.width() - self.width()) / 2
        y_coordinates = (screen_size.height() - self.height()) / 2 - 20
        self.move(x_coordinates, y_coordinates)

        # Load the navigation list
        navigation_model = NavigationListModel(NAVIGATION_PAGES)
        self.navigation_tab.setModel(navigation_model)
        self.navigation_tab.setStyleSheet("QListView::item { padding: 25px; }")
        # Handle navigation
        self.navigation_tab.clicked.connect(self.navigate)

        # Handle starting a new project
        self.new_project_button.clicked.connect(self.start_new_project)
        # Handle opening an existing project
        self.existing_project_button.clicked.connect(self.open_existing_project)

        # Collect the currently selected item from the tree view
        self.dir_tree_view.clicked.connect(self.on_selected)

        # Collect the currently selected item
        self.video_list_view.clicked.connect(self.on_vid_selected)

        # Define media player
        logger.debug("Loading media player")
        self.mediaPlayer = QMediaPlayer()
        self.mediaPlaylist = QMediaPlaylist()
        # Set the video output from the QMediaPlayer to the QVideoWidget.
        self.mediaPlayer.setVideoOutput(self.video_player)

        # Set the QPushButtons to play, pause and stop the video in the QVideoWidget.
        self.play_button.clicked.connect(self.play_video)
        self.pause_button.clicked.connect(self.pause_video)
        self.stop_button.clicked.connect(self.stop_video)
        # Set the total range for the QSlider.
        self.mediaPlayer.durationChanged.connect(self.change_duration)
        # Set the current value for the QSlider.
        self.mediaPlayer.positionChanged.connect(self.change_position)
        # Set the video position in QMediaPlayer based on the QSlider position.
        self.horizontal_slider.sliderMoved.connect(self.video_position)

        # Save note/flag status when button is clicked
        self.note_status.setStyleSheet("QLabel { color : green; }")
        self.save_note_button.clicked.connect(self.save_note)
        self.flag_video_button.clicked.connect(self.flag_video)

    ######################################
    # Navigation controls
    ######################################
    def navigate(self, selected_index):
        """
        Set the current page of the stack widget to the index of the list view
        """
        self.stack_widget.setCurrentIndex(selected_index.row())

    ######################################
    # Video player controls
    ######################################
    def play_video(self):
        """
        Handles the clicked signal generated by playButton and plays the video in the mediaPlayer.
        """
        self.mediaPlayer.play()
        duration = self.mediaPlayer.duration()
        sec, min = convert_to_seconds(int(duration))
        self.total_duration.setText(f"{min}:{sec}")

    def pause_video(self):
        """
        Handles the clicked signal generated by playButton and pauses video in the mediaPlayer.
        """
        self.mediaPlayer.pause()

    def stop_video(self):
        """
        Handles the clicked signal generated by playButton and stops the video in the mediaPlayer.
        """
        self.mediaPlayer.stop()

    def change_position(self, position):
        """
        Handles the positionChanged signal generated by the mediaPlayer.
        Sets the current value of the QSlider to the current position of the video in the QMediaPlayer.
        :param position: current position of the video in the QMediaPlayer.
        """
        self.horizontal_slider.setValue(position)
        sec, min = convert_to_seconds(int(position))
        self.current_duration.setText(f"{min}:{sec}")

    def change_duration(self, duration):
        """
        Handles the durationChanged signal generated by the mediaPlayer.
        Sets the range of the QSlider.
        :param duration: Total duration of the video in the QMediaPlayer.
        """
        self.horizontal_slider.setRange(0, duration)

    def video_position(self, position):
        """
        Handles the sliderMoved signal generated by the horizontalSlider.
        Changes the position of the video in the QMediaPlayer on changing the value of the QSlider.
        :param position: Current position value of the QSlider.
        :return:
        """
        self.mediaPlayer.setPosition(position)

    ######################################
    # New/Load project controls
    ######################################
    def open_existing_project(self):
        """
        Launches a QFileDialog which allows the user to select a .json file.
        """
        file_name = QtWidgets.QFileDialog.getOpenFileName(
            self, "Open File", "C:", ("JSON (*.json)")
        )
        if file_name != None:
            # If project exists, load
            logger.debug(f"Opening existing project file -> {file_name[0]}")
            file_path = Path(file_name[0])
            # If the file is a dashcam_investigator file, load the project from it
            if file_path.name == "dashcam_investigator.json":
                # Load project into object
                self.project_object = self.project_manager.load_existing_project(
                    file_path
                )

                # Populate the video table view
                self.list_model = VideoListModel(self.project_object.video_files)
                self.video_list_view.setModel(self.list_model)

                # Load current project directory to tree view
                tree_path = Path(
                    self.project_object.project_info.input_directory
                ).resolve()
                logger.debug(
                    f"Loading selected input directory to the TreeView -> {tree_path}"
                )
                model = QtWidgets.QFileSystemModel()
                model.setRootPath(str(tree_path))
                self.dir_tree_view.setModel(model)
                self.dir_tree_view.setRootIndex(model.index(str(tree_path)))

                # Ensure that the tree view shows only the name columns
                self.dir_tree_view.hideColumn(1)
                self.dir_tree_view.hideColumn(2)
                self.dir_tree_view.hideColumn(3)
                self.dir_tree_view.show()

                # Navigate to the project page
                self.stack_widget.setCurrentIndex(1)

    def start_new_project(self):
        """
        Launch the new project dialog and setup a new project.
        """
        logger.debug(f"Starting a new project. Launched new project dialog.")
        dialog = NewProjectDialog(self)
        dialog.exec()
        # If the user closes the dialog by clicking on 'Okay', then begin processing
        if dialog.result() == 1:
            logger.debug(f"Retreiving values entered into dialog.")
            input_dir, output_dir, case_name, investigator_name = dialog.save()

            logger.debug(f"Creating a new project with inputs provided.")
            # Create a new project manager object and begin processing data
            self.project_manager = ProjectManager(
                input_dir=input_dir,
                output_dir=output_dir,
                case_name=case_name,
                investigator_name=investigator_name,
            )

            logger.debug(f"Processing files from input directory")
            # create_new_project(self.project_manager)

            # progress = QtWidgets.QProgressDialog("Copying files...", "Abort Copy", 0, numFiles, self)
            # progress.setWindowModality(Qt.WindowModal)

    ######################################
    # Notes/flag controls
    ######################################
    def save_note(self):
        """
        Saves the text in the Notes textbox to the project object.
        """
        logger.debug(f"Saved note for -> {self.current_video.name}")
        self.current_video.notes = self.notes_textbox.toPlainText()
        self.project_manager.write_project_file(data=self.project_object)
        self.note_status.setText("Note saved!")

    def flag_video(self):
        """
        Set flagged property to True and write to file.
        """
        index = self.video_list_view.selectedIndexes()
        logger.debug(f"Flagged video -> {self.current_video.name}")
        self.current_video.flagged = not self.current_video.flagged
        if self.current_video.flagged:
            self.note_status.setText("Video flagged!")
        else:
            self.note_status.setText("Video un-flagged!")
        self.project_manager.write_project_file(data=self.project_object)
        self.list_model.dataChanged.emit(index[0], index[0])

    ######################################
    # Actions when a video is selected from tree view or list
    ######################################
    def on_vid_selected(self, selected_index):
        """
        When a video is selected from the List View, get the file name and pass it to load_video_data
        """
        self.load_video_data(selected_index.data())

    def on_selected(self, selected_index):
        """
        When a file is selected from the Tree view, get the file name and pass it to load_video_data
        """
        self.note_status.setText("")
        # Get the path of the selected file
        fs = QtWidgets.QFileSystemModel()

        if not fs.isDir(selected_index):
            file_name = fs.fileName(selected_index)
            self.load_video_data(file_name)

    def load_video_data(self, video_name):
        """
        This function retrieves the information for the selected video.
        The information is used to load the video into the player and load maps, metadata, graphs and notes.
        """
        # Get the attributes of the selected video
        self.current_video: FileAttributes = [
            video
            for video in self.project_object.video_files
            if video.name == video_name
        ][0]

        logger.debug(f"Loading video information for -> {self.current_video.name}")

        video_path = Path(self.current_video.file_path)
        map_file = self.current_video.output_files[0]
        graph_file = self.current_video.output_files[1]
        metadata_file = self.current_video.meta_files[1]

        ######################################
        # Video player
        ######################################
        # Stop current video and clear playlist
        self.mediaPlayer.stop()
        self.mediaPlaylist.clear()
        # Add selected video to playlist and initalise the media player
        logger.debug(
            f"New item selected. Adding to playlist -> {str(video_path.resolve())}"
        )
        self.mediaPlaylist.addMedia(QUrl.fromLocalFile(str(video_path.resolve())))
        self.mediaPlayer.setPlaylist(self.mediaPlaylist)

        # Set currently playing label
        self.video_title.setText(f"Currently playing : {str(video_path.resolve())}")

        ######################################
        # Map tab
        ######################################
        with Path(map_file).open() as f:
            html_str = f.read()
        self.maps_web_view.setHtml(html_str)

        ######################################
        # Metadata tab
        ######################################
        metadata_df = pd.read_csv(metadata_file).T
        metadata_df.rename(columns={0: "Value"}, inplace=True)
        self.metadata_model = PandasTableModel(metadata_df)
        self.metadata_table.setModel(self.metadata_model)

        ######################################
        # Speed Graph tab
        ######################################
        with Path(graph_file).open() as f:
            graph_str = f.read()
        self.graph_web_view.setHtml(graph_str)

        ######################################
        # Notes tab
        ######################################
        self.notes_textbox.setText(str(self.current_video.notes))


class NewProjectDialog(QtWidgets.QDialog, Ui_Dialog):
    """
    Launches the dialog to collect information to create a new project.
    """

    def __init__(self, parent=None):
        super().__init__(parent)
        self.input_dir = None
        self.output_dir = None
        self.case_name = None
        self.investigator_name = None

        # Run the .setupUi() method to show the GUI
        self.setupUi(self)

        # Open file dialog for input dir
        self.input_dir_button.clicked.connect(self.get_input_dir)

        # Open file dialog for output dir
        self.output_dir_button.clicked.connect(self.get_output_dir)

    def get_input_dir(self):
        """
        Sets the input directory path
        """
        dir = QtWidgets.QFileDialog.getExistingDirectory(
            self,
            "Open Directory",
            "C:",
            QtWidgets.QFileDialog.ShowDirsOnly
            | QtWidgets.QFileDialog.DontResolveSymlinks,
        )

        if dir != None:
            self.input_edit.setText(dir)
            self.input_dir = Path(dir)

    def get_output_dir(self):
        """
        Sets the output directory path
        """
        dir = QtWidgets.QFileDialog.getExistingDirectory(
            self,
            "Open Directory",
            "C:",
            QtWidgets.QFileDialog.ShowDirsOnly
            | QtWidgets.QFileDialog.DontResolveSymlinks,
        )

        if dir != None:
            self.output_edit.setText(dir)
            self.output_dir = Path(dir)

    def save(self):
        self.case_name = self.case_edit.toPlainText()
        self.investigator_name = self.investigator_edit.toPlainText()
        return self.input_dir, self.output_dir, self.case_name, self.investigator_name


def run():
    logger.info("---Running Dashcam Investigator---")
    app = QtWidgets.QApplication([])
    logger.debug("Initialising and displaying main window")

    # Set project options
    input_path = Path("H:\\DissertationDataset\\Nextbase312")
    output_path = Path("E:\\Output_Nextbase_312")

    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
